import React, { useState } from 'react';
import { loadStripe } from '@stripe/stripe-js';
import paymentService from '../../../services/paymentService';
import { notificationService } from '../../../services/notificationService';
import styles from '../CheckoutModal.module.css';
              <p><strong>M√©todo:</strong> Cart√£o de {cardData.cardType === 'credit' ? 'Cr√©dito' : 'D√©bito'}</p>
              <p><strong>Final do cart√£o:</strong> **** {cardData.cardNumber.slice(-4)}</p>
              <p><strong>Status:</strong> Pagamento confirmado</p>
              {paymentResult.id && (
                <p><strong>ID da transa√ß√£o:</strong> {paymentResult.id}</p>
              )}
            </div>

            <div className={styles.successActions}>
              <p style={{ color: '#28a745', fontWeight: 'bold' }}>
                üéâ Sua reserva foi confirmada!
              </p>
              <button 
                onClick={onClose}
                className={styles.closeButton}
                style={{ 
                  marginTop: '15px',
                  padding: '10px 20px',
                  background: '#28a745',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: 'pointer'
                }}
              >
                Fechar
              </button>
            </div>
          </div>
        )}ices/notificationService';
import styles from '../CheckoutModal.module.css';

// Inicializar Stripe (substitua pela sua chave p√∫blica)
const stripePromise = loadStripe('pk_test_51QkZHaHKQV1k5AQxRKXGhN7qLYNlOQ1TBu9QdLM3bGKP6vOQGHWzrMPPWz8cPMmMww2qOdQWZJ0q6K3oqOc7dqN000gdKwfCYC');

export function PaymentForm({ paymentMethod, totalPrice, packageData, travelers, onClose }) {
  const [isLoading, setIsLoading] = useState(false);
  const [paymentResult, setPaymentResult] = useState(null);
  const [error, setError] = useState(null);
  const [cardData, setCardData] = useState({
    cardNumber: '',
    cardName: '',
    expiryDate: '',
    cvv: '',
    cardType: 'credit' // credit ou debit
  });

  const handleCardInputChange = (e) => {
    const { name, value } = e.target;
    let formattedValue = value;

    // Formata√ß√£o espec√≠fica para cada campo
    if (name === 'cardNumber') {
      // Remove espa√ßos e limita a 16 d√≠gitos
      const numbers = value.replace(/\s/g, '').replace(/\D/g, '');
      // Adiciona espa√ßos a cada 4 d√≠gitos
      formattedValue = numbers.replace(/(\d{4})(?=\d)/g, '$1 ');
    } else if (name === 'expiryDate') {
      // Formato MM/AA
      const numbers = value.replace(/\D/g, '');
      if (numbers.length >= 2) {
        formattedValue = numbers.substring(0, 2) + '/' + numbers.substring(2, 4);
      } else {
        formattedValue = numbers;
      }
    } else if (name === 'cvv') {
      // Apenas n√∫meros
      formattedValue = value.replace(/\D/g, '');
    }

    setCardData(prev => ({
      ...prev,
      [name]: formattedValue
    }));
  };

  const validateCardForm = () => {
    if (!cardData.cardNumber.trim()) {
      setError('N√∫mero do cart√£o √© obrigat√≥rio');
      return false;
    }
    if (!cardData.cardName.trim()) {
      setError('Nome do titular √© obrigat√≥rio');
      return false;
    }
    if (!cardData.expiryDate.trim()) {
      setError('Data de validade √© obrigat√≥ria');
      return false;
    }
    if (!cardData.cvv.trim()) {
      setError('CVV √© obrigat√≥rio');
      return false;
    }
    return true;
  };

  // Fun√ß√£o para processar pagamento com Stripe.js
  const processStripePayment = async (clientSecret) => {
    try {
      const stripe = await stripePromise;
      
      if (!stripe) {
        throw new Error('Stripe n√£o foi carregado');
      }

      // Converter dados do cart√£o para o formato do Stripe
      const [month, year] = cardData.expiryDate.split('/');
      const cardNumber = cardData.cardNumber.replace(/\s/g, ''); // Remove espa√ßos

      console.log('üîµ Processando pagamento com Stripe:', {
        clientSecret: clientSecret.substring(0, 20) + '...',
        cardData: {
          number: cardNumber.substring(0, 4) + '****',
          exp_month: month,
          exp_year: `20${year}`,
          cvc: '***'
        }
      });

      // Confirmar pagamento com Stripe
      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: {
            number: cardNumber,
            exp_month: parseInt(month),
            exp_year: parseInt(`20${year}`),
            cvc: cardData.cvv,
          },
          billing_details: {
            name: cardData.cardName,
          }
        }
      });

      if (error) {
        console.error('‚ùå Erro do Stripe:', error);
        throw new Error(error.message || 'Erro ao processar pagamento com Stripe');
      }

      if (paymentIntent.status === 'succeeded') {
        console.log('‚úÖ Pagamento confirmado pelo Stripe:', paymentIntent);
        return paymentIntent;
      } else {
        throw new Error(`Status do pagamento: ${paymentIntent.status}`);
      }

    } catch (error) {
      console.error('‚ùå Erro no processamento Stripe:', error);
      throw error;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    // Valida√ß√£o espec√≠fica para cart√£o
    if (paymentMethod === 'card' && !validateCardForm()) {
      setIsLoading(false);
      return;
    }

    try {
      const paymentData = {
        amountPaid: totalPrice,
        receipt: `Pagamento ${paymentMethod} - ${packageData.title || packageData.name} - ${new Date().toISOString()}`,
        travelPackageId: packageData.id || packageData.packageId || 1, // ID do pacote
        travelers: travelers || [] // Array de viajantes
      };

      console.log('üí≥ Dados do pagamento enviando:', paymentData);
      console.log('üé´ Package Data:', packageData);
      console.log('üë• Travelers:', travelers);

      let result;
      if (paymentMethod === 'card') {
        // 1. Primeiro obter o clientSecret do backend
        result = await paymentService.createCardPayment(paymentData);
        console.log('üîµ ClientSecret recebido:', result);
        
        // 2. Processar pagamento com Stripe.js
        if (result.clientSecret) {
          await processStripePayment(result.clientSecret);
        } else {
          throw new Error('ClientSecret n√£o foi retornado pelo servidor');
        }
        
        notificationService.booking.purchaseSuccess();
      } else if (paymentMethod === 'pix') {
        result = await paymentService.createPixPayment(paymentData);
        notificationService.booking.pixCreated();
      } else if (paymentMethod === 'boleto') {
        result = await paymentService.createBoletoPayment(paymentData);
        notificationService.booking.boletoCreated();
      }

      setPaymentResult(result);
    } catch (error) {
      console.error('Erro no pagamento:', error);
      setError(error.message || 'Erro ao processar pagamento');
      notificationService.booking.purchaseError();
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    notificationService.booking.copied();
  };

  // Se j√° temos resultado do pagamento, mostrar os dados
  if (paymentResult) {
    return (
      <div className={styles.paymentResult}>
        {paymentMethod === 'card' && (
          <div className={styles.cardResult}>
            <h3>‚úÖ Pagamento Processado com Sucesso!</h3>
            <p>Seu pagamento com cart√£o foi processado.</p>
            
            <div className={styles.paymentInfo}>
              <p><strong>Valor:</strong> R$ {totalPrice.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>M√©todo:</strong> Cart√£o de {cardData.cardType === 'credit' ? 'Cr√©dito' : 'D√©bito'}</p>
              <p><strong>Final do cart√£o:</strong> **** {cardData.cardNumber.slice(-4)}</p>
              {paymentResult.transactionId && (
                <p><strong>ID da Transa√ß√£o:</strong> {paymentResult.transactionId}</p>
              )}
            </div>
          </div>
        )}

        {paymentMethod === 'pix' && (
          <div className={styles.pixResult}>
            <h3>‚úÖ PIX Gerado com Sucesso!</h3>
            <p>Escaneie o QR Code ou copie o c√≥digo PIX para fazer o pagamento:</p>
            
            {paymentResult.qrCodeImageUrl && (
              <div className={styles.qrCodeContainer}>
                <img 
                  src={paymentResult.qrCodeImageUrl}
                  alt="QR Code PIX"
                  className={styles.qrCode}
                />
              </div>
            )}
            
            <div className={styles.pixCodeContainer}>
              <label>C√≥digo PIX:</label>
              <div className={styles.codeWrapper}>
                <input 
                  type="text" 
                  readOnly 
                  value={paymentResult.qrCode || ''}
                  className={styles.pixCodeInput}
                />
                <button 
                  type="button" 
                  onClick={() => copyToClipboard(paymentResult.qrCode)}
                  className={styles.copyButton}
                >
                  Copiar
                </button>
              </div>
            </div>
            
            <div className={styles.paymentInfo}>
              <p><strong>Valor:</strong> R$ {(paymentResult.amount || totalPrice).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              {paymentResult.payerName && (
                <p><strong>Pagador:</strong> {paymentResult.payerName}</p>
              )}
              {paymentResult.transactionId && (
                <p><strong>ID da Transa√ß√£o:</strong> {paymentResult.transactionId}</p>
              )}
              <p><strong>Status:</strong> Aguardando pagamento</p>
            </div>
          </div>
        )}

        {paymentMethod === 'boleto' && (
          <div className={styles.boletoResult}>
            <h3>‚úÖ Boleto Gerado com Sucesso!</h3>
            <p>Clique no bot√£o abaixo para ser redirecionado para o boleto:</p>
            
            <div className={styles.paymentInfo}>
              <p><strong>Valor:</strong> R$ {totalPrice.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
              <p><strong>Status:</strong> Aguardando pagamento</p>
            </div>

            <div className={styles.boletoActions}>
              {paymentResult.bankSlipUrl ? (
                <a 
                  href={paymentResult.bankSlipUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className={styles.boletoButton}
                >
                  üìÑ Abrir Boleto (Stripe)
                </a>
              ) : (
                <p style={{ color: '#dc3545' }}>
                  ‚ö†Ô∏è URL do boleto n√£o foi retornada pelo servidor
                </p>
              )}
            </div>

            <div className={styles.boletoInfo}>
              <p><strong>üí° Instru√ß√µes:</strong></p>
              <ul>
                <li>Clique no bot√£o acima para abrir o boleto</li>
                <li>Voc√™ ser√° redirecionado para a p√°gina do Stripe</li>
                <li>Fa√ßa o download ou imprima o boleto</li>
                <li>Pague at√© a data de vencimento</li>
              </ul>
            </div>
          </div>
        )}

        <button onClick={onClose} className={styles.buyButton}>
          Concluir
        </button>
      </div>
    );
  }

  // Formul√°rio para confirmar o pagamento
  return (
    <div className={styles.paymentForm}>
      <h3>
        {paymentMethod === 'card' && 'Pagamento com Cart√£o'}
        {paymentMethod === 'pix' && 'Pagamento via PIX'}
        {paymentMethod === 'boleto' && 'Pagamento via Boleto'}
      </h3>
      
      <form onSubmit={handleSubmit} className={styles.formGrid}>
        {/* Campos espec√≠ficos para cart√£o */}
        {paymentMethod === 'card' && (
          <>
            <div className={styles.inputGroup}>
              <label>Tipo do Cart√£o:</label>
              <select
                name="cardType"
                value={cardData.cardType}
                onChange={handleCardInputChange}
                className={styles.fullWidth}
                required
              >
                <option value="credit">Cr√©dito</option>
                <option value="debit">D√©bito</option>
              </select>
            </div>

            <div className={styles.inputGroup}>
              <label>N√∫mero do Cart√£o:</label>
              <input
                type="text"
                name="cardNumber"
                value={cardData.cardNumber}
                onChange={handleCardInputChange}
                placeholder="1234 5678 9012 3456"
                className={styles.fullWidth}
                maxLength="19"
                required
              />
            </div>

            <div className={styles.inputGroup}>
              <label>Nome do Titular:</label>
              <input
                type="text"
                name="cardName"
                value={cardData.cardName}
                onChange={handleCardInputChange}
                placeholder="Nome como est√° no cart√£o"
                className={styles.fullWidth}
                required
              />
            </div>

            <div className={styles.inputRow}>
              <div className={styles.inputGroup}>
                <label>Validade (MM/AA):</label>
                <input
                  type="text"
                  name="expiryDate"
                  value={cardData.expiryDate}
                  onChange={handleCardInputChange}
                  placeholder="12/28"
                  maxLength="5"
                  required
                />
              </div>

              <div className={styles.inputGroup}>
                <label>CVV:</label>
                <input
                  type="text"
                  name="cvv"
                  value={cardData.cvv}
                  onChange={handleCardInputChange}
                  placeholder="123"
                  maxLength="4"
                  required
                />
              </div>
            </div>
          </>
        )}

        <div className={styles.summary}>
          <h4>{packageData.title || packageData.name}</h4>
          <p>{travelers.length} viajante(s)</p>
          <p className={styles.totalPrice}>
            R$ {totalPrice.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
          </p>
          {paymentMethod === 'card' && <p>üí≥ Pagamento seguro</p>}
          {paymentMethod === 'pix' && <p>üíö Pagamento instant√¢neo</p>}
          {paymentMethod === 'boleto' && <p>üìÑ Vencimento em 3 dias √∫teis</p>}
        </div>

        {error && (
          <div className={styles.errorMessage}>
            ‚ö†Ô∏è {error}
          </div>
        )}

        <button 
          type="submit"
          className={styles.buyButton} 
          disabled={isLoading}
        >
          {isLoading ? 'Processando...' : (
            paymentMethod === 'card' ? 'Finalizar Pagamento' :
            paymentMethod === 'pix' ? 'Gerar PIX' : 'Gerar Boleto'
          )}
        </button>
      </form>
    </div>
  );
}
